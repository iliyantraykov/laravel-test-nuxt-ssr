.btn {
  display: inline-block;
  font-family: $btn-font-family;
  font-weight: $btn-font-weight;
  color: $body-color;
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  user-select: none;
  background-color: transparent;
  border: $btn-border-width solid transparent;
  @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-line-height, $btn-border-radius);
  @include transition($btn-transition);

  @include hover() {
    color: $body-color;
    text-decoration: none;
  }

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }

  &:not(:disabled):not(.disabled) {
    cursor: if($enable-pointer-cursor-for-buttons, pointer, null);

    &:active,
    &.active {
      @include box-shadow($btn-active-box-shadow);

      &:focus {
        @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
      }
    }
  }
}

//
// Alternate buttons
//

.btn--primary {
  @include button-variant($white, $pink, $pink, $white, lighten($pink,4%));
}

.btn--primary-invert {
  @include button-variant($black, $pink, $pink, $black, lighten($pink,4%));
}

.btn--secondary {
  @include button-variant($white, $black, $black, lighten($black,4%));
}

@each $color, $value in $button-colors {
  .btn--#{$color} {
    @include button-variant(nth($value, 2), nth($value, 1), nth($value, 1), lighten(nth($value, 1),4%));
  }
}

@each $color, $value in $outline-button-colors {
  .btn--#{$color}--outline {
    @include button-outline-variant(nth($value, 1), nth($value, 2), nth($value, 3));
  }
}

/*
 * Link buttons
 */
.btn--link {
  font-weight: $font-weight-normal;
  color: $link-color;
  border-radius: 0;
  &.btn {
    padding: 0;
  }

  &__text {
    border-bottom: 1px solid transparent;
    transition: border-color #{$transition-fast};
    @include hover() {
      border-bottom-color: $link-hover-color;
    }
  }

  @include hover() {
    color: $link-hover-color;
    .btn__icon--outline {
      transition: stroke #{$transition-standard};
      stroke: $link-color;
      svg,path {
        stroke: $link-hover-color;
      }
    }
    .btn__icon--solid {
      transition: fill #{$transition-standard};
      fill: $link-color;
      svg,path {
        fill: $link-hover-color;
      }
    }
  }

  &:focus,
  &.focus {
    text-decoration: $link-hover-decoration;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
    pointer-events: none;
  }
  // No need for an active state here
}

.btn--link--pink-bg {
  @extend .btn--link;
  @include hover() {
    color: $black;
    border-bottom-color: $black;
  }
}

/*
 * Icon buttons
 */

// .btn--icon refers to the icon that contains the
.btn--icon {
  @include button-size($btn-padding-y, $btn-padding-y, $btn-font-size, 1, $btn-border-radius);
  &.btn--lg {
    @include button-size($btn-padding-y-lg, $btn-padding-y-lg, $btn-font-size-lg, 1, $btn-border-radius-lg);
  }
  &.btn--sm {
    @include button-size($btn-padding-y-sm, $btn-padding-y-sm, $btn-font-size-sm, 1, $btn-border-radius-sm);
  }
  &.btn--xsm {
    @include button-size($btn-padding-y-xsm, $btn-padding-y-xsm, $btn-font-size-xsm, 1, $btn-border-radius-sm);
  }
}

// .btn__icon reffers to the icon it self inside the button
.btn:not(.btn--icon) {
  .btn__icon {
    svg {
      vertical-align: middle;
      position: relative;
      bottom: 2px;
      margin-right: 4px;
    }
    path,circle {
      transition: all #{$transition-fast};
    }
  }
}

//
// Button Sizes
//
.btn--lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
}

.btn--sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
}

.btn--xsm {
  @include button-size($btn-padding-y-xsm, $btn-padding-x-xsm, $btn-font-size-xsm, $btn-line-height-xsm, $btn-border-radius-sm);
}

//
// Block button
//

.btn--block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}

/*
 * Vue formulate overrides
 */
.formulate-input--submit button {
  @extend .btn;
  font-weight: $font-weight-bold;
}

.formulate-input--submit--sm button {
  @extend .btn--sm;
}

.formulate-input--submit--primary button {
  @extend .btn--primary;
}

.formulate-input--submit--block button {
  @extend .btn--block;
}
